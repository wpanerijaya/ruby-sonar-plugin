<rules>
	<rule>
		<key>Attribute</key>
		<priority>MINOR</priority>
		<name><![CDATA[Attribute]]></name>
		<description>
      <![CDATA[
        <p>
          A class that publishes a getter or setter for an instance variable invites client classes to 
          become too intimate with its inner workings, and in particular with its representation of state.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>ClassVariable</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Class Variable]]></name>
		<description>
      <![CDATA[
        <p>
          Class variables form part of the global runtime state, and as such make it easy for one part 
          of the system to accidentally or inadvertently depend on another part of the system. So the 
          system becomes more prone to problems where changing something over here breaks something 
          over there. In particular, class variables can make it hard to set up tests (because the 
          context of the test includes all global state).
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>ControlCouple</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Control Couple]]></name>
		<description>
      <![CDATA[
        <p>
          Control coupling occurs when a method or block checks the value of a parameter in order to 
          decide which execution path to take. The offending  parameter is often called a "Control Couple".
        </p>
        <p>
          Control Coupling is a kind of duplication, because the calling method already knows which path should be taken.
        </p>
        <p>
          Control Coupling reduces the code's flexibility by creating a dependency between the caller and 
          callee: any change to the possible values of the controlling parameter must be reflected on both 
          sides of the call. A Control Couple also revmethoeals a loss of simplicity: the called method probably 
          has more than one responsibility, because it includes at least two different code paths.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>BooleanParameter</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Boolean Parameter]]></name>
		<description>
      <![CDATA[
        <p>
          Control coupling occurs when a method or block checks the value of a parameter in order to 
          decide which execution path to take. The offending  parameter is often called a "Control Couple".
        </p>
        <p>
          Control Coupling is a kind of duplication, because the calling method already knows which path should be taken.
        </p>
        <p>
          Control Coupling reduces the code's flexibility by creating a dependency between the caller and 
          callee: any change to the possible values of the controlling parameter must be reflected on both 
          sides of the call. A Control Couple also revmethoeals a loss of simplicity: the called method probably 
          has more than one responsibility, because it includes at least two different code paths.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>ControlParameter</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Control Parameter]]></name>
		<description>
      <![CDATA[
        <p>
          Control coupling occurs when a method or block checks the value of a parameter in order to 
          decide which execution path to take. The offending  parameter is often called a "Control Couple".
        </p>
        <p>
          Control Coupling is a kind of duplication, because the calling method already knows which path should be taken.
        </p>
        <p>
          Control Coupling reduces the code's flexibility by creating a dependency between the caller and 
          callee: any change to the possible values of the controlling parameter must be reflected on both 
          sides of the call. A Control Couple also revmethoeals a loss of simplicity: the called method probably 
          has more than one responsibility, because it includes at least two different code paths.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>DataClump</key>
		<priority>MINOR</priority>
		<name><![CDATA[Data Clump]]></name>
		<description>
      <![CDATA[
        <p>
          In general, a Data Clump occurs when the same two or three items frequently appear together 
          in classes and parameter lists, or when a group of instance variable names start or end with similar substrings.
        </p>
        <p>
          The recurrence of the items often means there is duplicate code spread around to handle them. 
          There may be an abstraction missing from the code, making the system harder to understand.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>Duplication</key>
		<priority>MINOR</priority>
		<name><![CDATA[Duplication]]></name>
		<description>
      <![CDATA[
        <p>
          Duplication occurs when two fragments of code look nearly identical, or when two fragments of code 
          have nearly identical effects at some conceptual level.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>DuplicateMethodCall</key>
		<priority>MINOR</priority>
		<name><![CDATA[Duplicate Method Call]]></name>
		<description>
      <![CDATA[
        <p>
          Duplication occurs when two fragments of code look nearly identical, or when two fragments of code 
          have nearly identical effects at some conceptual level.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>FeatureEnvy</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Feature Envy]]></name>
		<description>
      <![CDATA[
        <p>
          Feature Envy occurs when a code fragment references another object more often than it references itself, 
          or when several clients do the same series of manipulations on a particular type of object.
        </p>
        <p>A simple example would be the following method, which "belongs" on the Item class and not on the Cart class:<br></p>
        <pre><code>
class Cart
  def price
    @item.price + @item.tax
  end
end
        </code></pre>
        <p>
          Feature Envy reduces the code's ability to communicate intent: code that "belongs" on one class but which 
          is located in another can be hard to find, and may upset the "System of Names" in the host class.
        </p>
        <p>
          Feature Envy also affects the design's flexibility: A code fragment that is in the wrong class creates 
          couplings that may not be natural within the application’s domain, and creates a loss of cohesion in the 
          unwilling host class.
        </p>
        <p>
          Feature Envy often arises because it must manipulate other objects (usually its arguments) to get them 
          into a useful form, and one force preventing them (the arguments) doing this themselves is that the common 
          knowledge lives outside the arguments, or the arguments are of too basic a type to justify extending that 
          type. Therefore there must be something which 'knows' about the contents or purposes of the arguments.  
          That thing would have to be more than just a basic type, because the basic types are either containers 
          which don't know about their contents, or they are single objects which can't capture their relationship 
          with their fellows of the same type. So, this thing with the extra knowledge should be reified into a class, 
          and the utility method will most likely belong there.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UtilityFunction</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Utility Function]]></name>
		<description>
      <![CDATA[
        <p>
          A Utility Function is any instance method that has no dependency on the state of the instance.
        </p>
        <p>
          A Utility Function reduces the code's ability to communicate intent: code that "belongs" on one 
          class but which is located in another can be hard to find, and may upset the "System of Names" in 
          the host class. A Utility Function also affects the design's flexibility: A code fragment that 
          is in the wrong class creates couplings that may not be natural within the application's domain, 
          and creates a loss of cohesion in the unwilling host class.
        </p>
        <p>
          A Utility Function often arises because it must manipulate other objects (usually its arguments) to 
          get them into a useful form, and one force preventing them (the arguments) doing this themselves 
          is that the common knowledge lives outside the arguments, or the arguments are of too basic a type 
          to justify extending that type. Therefore there must be something which 'knows' about the contents 
          or purposes of the arguments. That thing would have to be more than just a basic type, because the 
          basic types are either containers which don’t know about their contents, or they are single objects 
          which can't capture their relationship with their fellows of the same type. So, this thing with the 
          extra knowledge should be reified into a class, and the utility method will most likely belong there.
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>IrresponsibleModule</key>
		<priority>MINOR</priority>
		<name><![CDATA[Irresponsible Module]]></name>
		<description>
      <![CDATA[
        <p>
          Classes and modules are the units of reuse and release. It is therefore considered good practice to 
          annotate every class and module with a brief comment outlining its responsibilities.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>PrimaDonnaMethod</key>
		<priority>MAJOR</priority>
		<name><![CDATA[PrimaDonna Method]]></name>
		<description>
      <![CDATA[
        <p>
          A candidate method for the Prima Donna Method smell are methods whose names end with an exclamation mark.
          An exclamation mark in method names means (the explanation below is taken from here ):
        </p>
        <p>
          The ! in method names that end with ! means, “This method is dangerous”—or, more precisely, this method is the “dangerous” version of an otherwise equivalent method, with the same name minus the !. “Danger” is relative; the ! doesn’t mean anything at all unless the method name it’s in corresponds to a similar but bang-less method name. So, for example, gsub! is the dangerous version of gsub. exit! is the dangerous version of exit. flatten! is the dangerous version of flatten. And so forth.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>LongParameterList</key>
		<priority>MINOR</priority>
		<name><![CDATA[Long Parameter List]]></name>
		<description>
      <![CDATA[
        <p>
          A Long Parameter List occurs when a method has more than one or two parameters.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>LongYieldList</key>
		<priority>MINOR</priority>
		<name><![CDATA[Long Yield List]]></name>
		<description>
      <![CDATA[
        <p>
          A Long Yield List occurs when a method yields more than one or two objects to an associated block.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>NestedIterators</key>
		<priority>MINOR</priority>
		<name><![CDATA[Nested Iterators]]></name>
		<description>
      <![CDATA[
        <p>
          A Nested Iterator occurs when a block contains another block.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>SimulatedPolymorphism</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Simulated Polymorphism]]></name>
		<description>
      <![CDATA[
        <p>
          Simulated Polymorphism occurs when
        </p>
        <ul>
          <li>code uses a case statement (especially on a type field);</li>
	      <li>or code has several if statements in a row (especially if they're comparing against the same value);</li>
	      <li>or code uses instance_of?, kind_of?, is_a?, or === to decide what type it's working with;</li>
	      <li>or multiple conditionals in different places test the same value.</li>
        </ul>
        <p>
          Conditional code is hard to read and understand, because the reader must hold more state in his head. 
          When the same value is tested in multiple places throughout an application, any change to the set of 
          possible values will require many methods and classes to change. Tests for the type of an object may 
          indicate that the abstraction represented by that type is not completely defined (or understood).
        </p>        
      ]]>
		</description>
	</rule>
	<rule>
		<key>NilCheck</key>
		<priority>MINOR</priority>
		<name><![CDATA[Nil Check]]></name>
		<description>
      <![CDATA[
        <p>
          Perform nil check is a type check. Which violates "tell, don't ask".        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>RepeatedConditional</key>
		<priority>MINOR</priority>
		<name><![CDATA[Repeated Conditional]]></name>
		<description>
      <![CDATA[
        <p>
          Conditional code is hard to read and understand, because the reader must hold more state in his head. 
          When the same value is tested in multiple places throughout an application, any change to the set of 
          possible values will require many methods and classes to change. Tests for the type of an object may 
          indicate that the abstraction represented by that type is not completely defined (or understood).
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>LargeClass</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Large Class]]></name>
		<description>
      <![CDATA[
        <p>
          A Large Class is a class or module that has a large number of instance variables, methods 
          or lines of code in any one piece of its specification. (That is, this smell relates to 
          pieces of the class''s specification, not to the size of the corresponding instance of Class.).        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>TooManyInstanceVariables</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Too Many Instance Variables]]></name>
		<description>
      <![CDATA[
        <p>
          Warns about a class or module that has too many instance variables.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>TooManyMethods</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Too Many Methods]]></name>
		<description>
      <![CDATA[
        <p>
          Warns about a class or module that has too many methods.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>TooManyStatements</key>
		<priority>MAJOR</priority>
		<name><![CDATA[Too Many Statements]]></name>
		<description>
      <![CDATA[
        <p>
          Currently Too Many Statements warns about any method that has more than 5 "statements". 
          Reek's smell detector for Too Many Statements counts +1 for every simple statement in 
          a method and +1 for every statement within a control structure (<code>if</code>, 
          <code>else</code>, <code>case</code>, <code>when</code>, <code>for</code>, <code>while</code>, 
          <code>until</code>, <code>begin</code>, <code>rescue</code> — but it doesn't count the control 
          structure itself.
        </p>
        <p>
          So the following method would score +6 in Reek's statement-counting algorithm:
        </p>
        <pre><code>
def parse(arg, argv, &amp;error)
  if !(val = arg) and (argv.empty? or /\A-/ =~ (val = argv[0]))
    return nil, block, nil                                         # +1
  end
  opt = (val = parse_arg(val, &amp;error))[1]                          # +2
  val = conv_arg(*val)                                             # +3
  if opt and !arg
    argv.shift                                                     # +4
  else
    val[0] = nil                                                   # +5
  end
  val                                                              # +6
end
        </code></pre>
        <p>
          (You might argue that the two assigments within the first <code>if</code> should count 
          as statements, and that perhaps the nested assignment should count as +2. If you do, 
          please feel free to vote up ticket #32.)
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UncommunicativeName</key>
		<priority>MINOR</priority>
		<name><![CDATA[Uncommunicative Name]]></name>
		<description>
      <![CDATA[
        <p>
          An Uncommunicative Name is a name that doesn't communicate its intent well enough.
        </p>
        <p>
          Poor names make it hard for the reader to build a mental picture of what's going on in the code. 
          They can also be mis-interpreted; and they hurt the flow of reading, because the reader must 
          slow down to interpret the names.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UncommunicativeMethodName</key>
		<priority>MINOR</priority>
		<name><![CDATA[Uncommunicative Method Name]]></name>
		<description>
      <![CDATA[
        <p>
          An Uncommunicative Method Name is a method name that doesn't communicate its intent well enough.
        </p>
        <p>
          Poor names make it hard for the reader to build a mental picture of what's going on in the code. 
          They can also be mis-interpreted; and they hurt the flow of reading, because the reader must 
          slow down to interpret the names.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UncommunicativeModuleName</key>
		<priority>MINOR</priority>
		<name><![CDATA[Uncommunicative Module Name]]></name>
		<description>
      <![CDATA[
        <p>
          An Uncommunicative Module Name is a module name that doesn't communicate its intent well enough.
        </p>
        <p>
          Poor names make it hard for the reader to build a mental picture of what's going on in the code. 
          They can also be mis-interpreted; and they hurt the flow of reading, because the reader must 
          slow down to interpret the names.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UncommunicativeParameterName</key>
		<priority>MINOR</priority>
		<name><![CDATA[Uncommunicative Parameter Name]]></name>
		<description>
      <![CDATA[
        <p>
          An Uncommunicative Parameter Name is a parameter name that doesn't communicate its intent well enough.
        </p>
        <p>
          Poor names make it hard for the reader to build a mental picture of what's going on in the code. 
          They can also be mis-interpreted; and they hurt the flow of reading, because the reader must 
          slow down to interpret the names.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UncommunicativeVariableName</key>
		<priority>MINOR</priority>
		<name><![CDATA[Uncommunicative Variable Name]]></name>
		<description>
      <![CDATA[
        <p>
          An Uncommunicative Variable Name is a variable name that doesn't communicate its intent well enough.
        </p>
        <p>
          Poor names make it hard for the reader to build a mental picture of what's going on in the code. 
          They can also be mis-interpreted; and they hurt the flow of reading, because the reader must 
          slow down to interpret the names.        
        </p>
      ]]>
		</description>
	</rule>
	<rule>
		<key>UnusedParameters</key>
		<priority>MINOR</priority>
		<name><![CDATA[Unused Parameters]]></name>
		<description>
      <![CDATA[
        <p>
          Unused Parameters refers to methods with parameters that are unused in scope of the method.
        </p>
        <p>
          Having unused parameters in a method is code smell because leaving dead code in a method 
          can never improve the method and it makes the code confusing to read.        
        </p>
      ]]>
		</description>
	</rule>
</rules>
